import '@fortawesome/fontawesome-svg-core/styles.css'
import '@/styles/global.css'

import {config as faConfig} from '@fortawesome/fontawesome-svg-core'
import type {Metadata, Viewport} from 'next'
import {Inter} from 'next/font/google'
import {notFound} from 'next/navigation'
import {useMessages} from 'next-intl'

import LocaleSwitcher from '@/components/locale-switcher'
import {ThemeProvider} from '@/components/providers'
import {ThemeToggle} from '@/components/theme-toggle'
import {env} from '@/lib/env'
import {AppConfig} from '@/utils/AppConfig'

faConfig.autoAddCss = false

const inter = Inter({subsets: ['latin']})

export const viewport: Viewport = {
  width: 'device-width',
  initialScale: 1,
  viewportFit: 'cover',
  themeColor: [
    {media: '(prefers-color-scheme: light)', color: '#fefffe'},
    {media: '(prefers-color-scheme: dark)', color: '#2d3439'}
  ]
}

export const metadata: Metadata = {
  metadataBase: new URL(env.NEXT_PUBLIC_HOST || 'https://devs7ud.io'),
  title: 'DEVS7UD.IO',
  description: 'Generated by create next app',
  generator: AppConfig.name,
  applicationName: AppConfig.name,
  referrer: 'origin-when-cross-origin',
  keywords: AppConfig.keywords,
  authors: AppConfig.authors,
  creator: AppConfig.authors[0]?.name,
  icons: [
    {
      rel: 'apple-touch-icon',
      url: '/apple-touch-icon.png'
    },
    {
      rel: 'icon',
      type: 'image/png',
      sizes: '32x32',
      url: '/favicon-32x32.png'
    },
    {
      rel: 'icon',
      type: 'image/png',
      sizes: '16x16',
      url: '/favicon-16x16.png'
    },
    {
      rel: 'icon',
      url: '/favicon.ico'
    }
  ],
  manifest: '/manifest.json',
  formatDetection: {
    email: false,
    address: false,
    telephone: false
  },
  appleWebApp: {
    statusBarStyle: 'black-translucent'
  },
  robots: {
    index: true,
    follow: true
  },
  twitter: AppConfig.twitter
    ? {
        creator: `@${AppConfig.twitter}`
      }
    : undefined
}

export function generateStaticParams() {
  return AppConfig.locales.map((locale) => ({locale}))
}

type RootLayoutProps = Readonly<{
  children: React.ReactNode
  params: {locale: string}
}>

export default function RootLayout({children, params}: RootLayoutProps) {
  // Validate that the incoming `locale` parameter is valid
  if (!AppConfig.locales.includes(params.locale)) notFound()

  // Using internationalization in Client Components
  const messages = useMessages()

  return (
    <html lang='en'>
      <body className={inter.className}>
        <ThemeProvider
          attribute='class'
          defaultTheme='system'
          enableSystem
          disableTransitionOnChange
          locale={params.locale}
          messages={messages}>
          <main className='flex min-h-screen flex-col items-center p-24'>
            <div className='flex flex-none items-center'>
              <p className='flex-none'>
                Get started by editing&nbsp;
                <code className='font-mono font-bold'>src/app/page.tsx</code>
              </p>
              <p className='flex-1' />
              <div className='flex flex-none items-center space-x-2'>
                <LocaleSwitcher />
                <ThemeToggle />
              </div>
            </div>
            {children}
            <div className='flex-none'>
              &copy; DEVS7UD.IO {new Date().getFullYear()}
            </div>
          </main>
        </ThemeProvider>
      </body>
    </html>
  )
}

// export const runtime = 'edge';
